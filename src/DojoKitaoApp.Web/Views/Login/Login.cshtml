@model LoginViewModel
@inject AuthApi service

@{
    var authenticationState = await service.GetAuthenticationStateAsync();
    var identity = authenticationState.User.Identity;
    ViewData["Title"] = "Acesso ao sistema";
}

<h2>@ViewData["Title"]</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (identity != null && identity.IsAuthenticated)
        {
            <p>Você está conectado como @identity.Name</p>
        }
        else
        {
            <form asp-action="Login">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Email" class="control-label"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Senha" class="control-label"></label>
                    <input asp-for="Senha" class="form-control" />
                    <span asp-validation-for="Senha" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Login" class="btn btn-primary" />
                </div>
            </form>
        }
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
